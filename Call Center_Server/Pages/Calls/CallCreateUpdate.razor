@page "/calls/create"
@page "/calls/update/{id:int}"
@using Microsoft.AspNetCore.Identity;
@inject IJSRuntime iJSRuntime
@inject ICallService iCallService
@inject NavigationManager nav
@inject AuthenticationStateProvider auth
@inject UserManager<ApplicationUser> userManager


@attribute [Authorize(Roles = StaticConstant.Role_Admin)]


<div class="container-fluid my-2">

    <div class="row">
        <h2 class="card-title text-primary mb-3 ml-3">@Title Call</h2>
        <hr />
    </div>

    <div class="row">

        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/general/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="CallModelEditForm" OnValidSubmit="CreateUpdateCall">
                <DataAnnotationsValidator />

                <div class="row g-2 mb-3">
                    <h3 class="text-center" style="color:GrayText">Call Information</h3>
                    <div class="col-6">
                        <div class="form-floating">
                            <InputNumber disabled class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.Id" />
                            <label for="floatingInputGrid">Call Id</label>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputDate class="form-control" id="floatingInputGrid" Type="InputDateType.DateTimeLocal" format="dd/MMM/yyyy hh:mm tt" @bind-Value="CallModelEditForm.CallDateTime" />
                            <label for="floatingInputGrid">Date & Time</label>
                            <ValidationMessage For="()=>CallModelEditForm.CallDateTime"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputSelect class="form-select" id="floatingSelectGrid" @bind-Value="CallModelEditForm.CallsUrgency">
                                <option value="Not Urgent">Not Urgent</option>
                                <option value="Normal">Normal</option>
                                <option value="Immediately">Immediately</option>
                            </InputSelect>
                            <label for="floatingSelectGrid">Urgency Level</label>
                            <ValidationMessage For="()=>CallModelEditForm.CallsUrgency"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputText class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CallStatus" />
                            <label for="floatingInputGrid">Status</label>
                            <ValidationMessage For="()=>CallModelEditForm.CallStatus"></ValidationMessage>
                        </div>
                    </div>

                    <div class="form-floating col-12">
                        <InputTextArea style="height:150px;" class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CallReason" />
                        <label for="floatingInputGrid">Reason Of Call *</label>
                        <ValidationMessage For="()=>CallModelEditForm.CallReason"></ValidationMessage>
                    </div>
                </div>

                <div class="row g-2 mt-4">
                    <h3 class="text-center" style="color:GrayText">Customer Information</h3>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputText class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CustomerName" />
                            <label for="floatingInputGrid">Full Name *</label>
                            <ValidationMessage For="()=>CallModelEditForm.CustomerName"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputText class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CustomerCompanyName" />
                            <label for="floatingInputGrid">Company Name</label>
                            <ValidationMessage For="()=>CallModelEditForm.CustomerCompanyName"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputText class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CustomerEmail" />
                            <label for="floatingInputGrid">Email *</label>
                            <ValidationMessage For="()=>CallModelEditForm.CustomerEmail"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputText class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CustomerPhone" />
                            <label for="floatingInputGrid">Phone Number *</label>
                            <ValidationMessage For="()=>CallModelEditForm.CustomerPhone"></ValidationMessage>
                        </div>
                    </div>

                    <div class="form-floating col-12">
                        <InputTextArea style="height:100px;" class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CustomerCompanyAddress" />
                        <label for="floatingInputGrid">Company Address</label>
                        <ValidationMessage For="()=>CallModelEditForm.CustomerCompanyAddress"></ValidationMessage>
                    </div>
                </div>


                <div class="row g-2 mt-4">
                    <h3 class="text-center" style="color:GrayText">More!</h3>

                    <div class="col-6">
                        <div class="form-floating">
                            <InputText class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.AgentEmployeeName" />
                            <label for="floatingInputGrid">Employee Name *</label>
                            <ValidationMessage For="()=>CallModelEditForm.AgentEmployeeName"></ValidationMessage>
                        </div>
                    </div>

                    @if (Id <= 0)
                    {
                        <div class="col-6">
                            <div class="form-floating">
                                <InputText disabled class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CallStage" />
                                <label for="floatingInputGrid">Stage</label>
                                <ValidationMessage For="()=>CallModelEditForm.CallStage"></ValidationMessage>
                            </div>
                        </div>
                    }
                    else if (Id > 0)
                    {
                        if (CallModelEditForm.CallStage == StaticConstant.CallStage_Completed || CallModelEditForm.CallStage == StaticConstant.CallStage_Cancelled)
                        {
                            <div class="col-6">
                                <div class="form-floating">
                                    <InputText disabled class="form-control" id="floatingInputGrid" @bind-Value="CallModelEditForm.CallStage" />
                                    <label for="floatingInputGrid">Stage</label>
                                    <ValidationMessage For="()=>CallModelEditForm.CallStage"></ValidationMessage>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-6">
                                <div class="form-floating">
                                    <InputSelect class="form-select" id="floatingSelectGrid" @bind-Value="CallModelEditForm.CallStage">
                                        <option value="@StaticConstant.CallStage_Processing">@StaticConstant.CallStage_Processing</option>
                                        <option value="@StaticConstant.CallStage_Offering">@StaticConstant.CallStage_Offering</option>
                                        <option value="@StaticConstant.CallStage_Pending">@StaticConstant.CallStage_Pending</option>
                                        <option value="@StaticConstant.CallStage_Approved">@StaticConstant.CallStage_Approved</option>
                                        <option value="@StaticConstant.CallStage_Cancelled">@StaticConstant.CallStage_Cancelled</option>
                                        <option value="@StaticConstant.CallStage_Completed">@StaticConstant.CallStage_Completed</option>
                                    </InputSelect>
                                    <label for="floatingSelectGrid">Stage</label>
                                    <ValidationMessage For="()=>CallModelEditForm.CallStage"></ValidationMessage>
                                </div>
                            </div>
                        }
                    }
                </div>

                <div class="row py-4">
                    <div class="form-group">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink href="/calls/dashboard" class="btn btn-secondary" @onclick="HandleClick">Dashboard</NavLink>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>



@code {

    [Parameter]
    public int Id { get; set; }

    private string Title = "Create";
    private bool IsLoading;
    private CallModel CallModelEditForm { get; set; } = new();

    private void HandleClick()
    {
        nav.NavigateTo("/calls/dashboard", true);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null)
        {
            var applicationUser = await userManager.FindByNameAsync(user.Identity.Name);
            if (applicationUser.FirstName != string.Empty && applicationUser.FirstName != null)
            {
                CallModelEditForm.AgentEmployeeName = applicationUser.FirstName + " " + applicationUser.MidName + " " + applicationUser.LastName;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id <= 0)
            {
                //Create Call.
                IsLoading = false;
            }
            else
            {
                //Update Call
                Title = "Update";
                await LoadCall();
            }
        }
    }

    private async Task LoadCall()
    {
        IsLoading = true;
        StateHasChanged();
        CallModelEditForm = await iCallService.GetCallAsync(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreateUpdateCall()
    {
        if (CallModelEditForm.Id == 0)
        {
            //Create Call.
            await iCallService.CreateCallAsync(CallModelEditForm);
            await iJSRuntime.InvokeVoidAsync("ShowToastr", "success", "Call Created Successfully.");
        }
        else if (CallModelEditForm.Id > 0)
        {
            //Update Call.
            await iCallService.UpdateCallAsync(CallModelEditForm);
            await iJSRuntime.InvokeVoidAsync("ShowToastr", "success", "Call Updated Successfully.");
        }
        else
        {
            await iJSRuntime.InvokeVoidAsync("ShowToastr", "error", "No call registered with this Id.");
        }
        nav.NavigateTo("/calls/dashboard", true);
    }
}
